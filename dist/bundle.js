(()=>{"use strict";const e={ulGenerator:(e,t,n)=>{let r=document.createElement("ul");r.id=n;for(let e=0;e<t;e++){let t=document.createElement("li");t.setAttribute("data-id",e),r.appendChild(t)}return e.appendChild(r),r},elementGenerator:({root:e,elementName:t,classes:n=[],attributes:r={}}={})=>{if(!t)return;let a=document.createElement(t);var o;return 0===n.length||((e,t)=>{for(let n of t)e.classList.add(n)})(a,n),o=r,0===Object.keys(o)||((e,t)=>{for(let[n,r]of Object.entries(t))try{e[n]=r}catch(e){console.log(e)}})(a,r),e.appendChild(a),a}},t={toCelsius:e=>{let t=[];for(let n of e)n[1]=Math.round((n[1]-32)*(5/9)),t.push(n);return t},toFahrenheit:e=>{let t=[];for(let n of e)n[1]=Math.round(1.8*+n[1]+32),t.push(n);return t},units:e=>({f:"&deg F",c:"&deg C",wind:"k/h"}[e])};(()=>{const n=document.getElementById("content"),r=((e,t)=>{let n;return{drawPage:()=>{0===t.childElementCount||t.removeChild(t.lastElementChild);const r=e.elementGenerator({root:t,elementName:"section",classes:[]}),a=e.elementGenerator({root:r,elementName:"article",classes:[]}),o=(e.elementGenerator({root:a,elementName:"input",classes:[],attributes:{placeholder:"e.g. london, uk"}}),e.elementGenerator({root:a,elementName:"button",classes:[],attributes:{textContent:"Submit Query"}}));n=[o]},getInteractive:()=>n||[]}})(e,n),a=((e,t)=>{let n;return{drawPage:()=>{0===t.childElementCount||t.removeChild(t.lastElementChild);const r=e.elementGenerator({root:t,elementName:"section",classes:[]}),a=(e.elementGenerator({root:r,elementName:"div",classes:[]}),e.elementGenerator({root:r,elementName:"div",classes:[]})),o=e.elementGenerator({root:a,elementName:"div",classes:[]}),l=e.elementGenerator({root:o,elementName:"div",classes:[]}),s=e.elementGenerator({root:l,elementName:"button",classes:[],attributes:{textContent:"Fahrenheit",id:"f"}}),i=e.elementGenerator({root:l,elementName:"button",classes:[],attributes:{textContent:"Celsius",id:"c"}}),c=e.elementGenerator({root:o,elementName:"div",classes:[]});e.ulGenerator(c,4,"data_list"),n=[s,i]},getInteractive:()=>n||[]}})(e,n),o=(()=>{let e,t="appid=97aa6c26c2af40cfea026c9e196de08b";return{fetchHandler:async(...n)=>{const r="q="+n.join(",");try{const n=await(async([e,n])=>{let r=[e,n,t].join("&");return(await fetch("https://api.openweathermap.org/data/2.5/weather?"+r,{mode:"cors"})).json()})([r,"units=metric"]);if("404"==n.cod)throw"Invalid query";e=n}catch(e){return console.log("error"),new Error(e)}return(()=>{const t=e.weather[0],n=e.main,r=e.wind;return{weather:{description:t.description},temperature:{main:n.temp,feels:n.feels_like,max:n.temp_max,min:n.temp_min},wind:{speed:r.speed}}})()}}})(),l=t;let s,i,c;const m=(e,t)=>{e.addEventListener("click",t)},d=e=>{const t={main:"Temperature",min:"Minimum Temperature",max:"Maximum Temperature",feels:"Feels Like",description:"Forecast for today is",speed:"Wind speed"};let n=[];for(let[r,a]of Object.entries(e)){const e=t[r];n.push([e,a])}return console.log("entries",n),n},u=e=>{const t={c:l.toCelsius,f:l.toFahrenheit},n=e.target.id,r=i.splice(0,4),a=t[n](r);((e,t)=>{for(let n of e){let e=+n.dataset.id;n.innerHTML=t[e].join(": ")}i=t})(document.getElementById("data_list").childNodes,a.concat(i))},h=async()=>{let e=document.querySelector("input").value;try{if(s=await o.fetchHandler(e),s.message)throw s}catch(e){return alert(e)}p(a),(()=>{let e=s.temperature,t=s.weather,n=s.wind;t=d(t),c=d(n),i=d(e)})()},p=(e=r)=>{let t=e===r?h:u;(e=>{e.drawPage(n)})(e),((e,t)=>{const n=e.getInteractive();for(let e of n)m(e,t)})(e,t)};return{run:p}})().run()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,